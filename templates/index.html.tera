{% extends "base" %}

{% block content %}
<main role="document" class="document-width feed-document">
  <form id="moment_form" action="/moment" method="POST" hx-post="/moment" hx-target="this" hx-swap="innerHTML">
    {% include "moment/form" %}
  </form>

  <div id="feed">
    <h1>Feed</h1>
    <hr class="htmx-insert-after">
    {% for moment in moments %}
      {% include "moment/article" %}
    {% endfor %}
  </div>
</main>

{% if not htmx.boosted %}
<script>
(() => {
  const $autocomplete_list = document.getElementById('content_autocomplete_list');

  momentary.beforeAutocompleteTagsRequest = (event, $textarea) => {
    const pos = momentary.findTagInTextArea($textarea);
    if (!pos) {
      $autocomplete_list.innerHTML = '';
      return event.preventDefault();
    }

    const q = $textarea.value.substring(pos[0], pos[1]);
    const b = $textarea.value.substring(0, pos[0]) + q;
    event.detail.parameters = {q};

    const $shadow = $textarea.parentNode.querySelector('.autocomplete-input-shadow');
    $shadow.innerHTML
      = '<span>'
      + b.replace(/</g, '&nbsp;').trim().split(' ').join('</span> <span>')
      + '</span>';

    const rect = momentary.getRelativeBoundingBox($shadow.querySelector('span:last-child'));
    $autocomplete_list.style.top = rect.bottom + 'px';
    $autocomplete_list.style.left = rect.left + 'px';
  };

  momentary.findTagInTextArea = (el) => {
    let [start, end] = [el.selectionStart, el.selectionEnd];
    if (start !== end) return null;

    end = el.value.indexOf(' ', end - 1);
    if (end === -1) end = el.value.length;

    start = el.value.lastIndexOf(' ', start - 1) + 1;
    return /^[#@]/.test(el.value.substring(start, end)) ? [start, end] : null;
  };

  momentary.onClickAutocompleteTag = (event) => {
    event.preventDefault();

    const $link = event.target.closest('a');
    if (!$link) return $autocomplete_list.innerHTML = '';

    const tag = $link.href.replace(/.*#autocomplete:/, '') + ' ';

    const $textarea = $link.closest('form').querySelector('[name=content]');
    const pos = momentary.findTagInTextArea($textarea);
    if (!pos) return console.error('Unable to find tag in textarea!', $textarea, $link);

    $autocomplete_list.innerHTML = '';
    $textarea.value = $textarea.value.substring(0, pos[0]) + tag + $textarea.value.substring(pos[1]);
    $textarea.focus();
    $textarea.selectionEnd = pos[0] + tag.length + 1;
  };
})();
</script>
{% endif %}
{% endblock %}
